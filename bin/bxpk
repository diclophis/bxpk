#!/usr/bin/env ruby

gem_dir = File.dirname(File.dirname(File.realpath(__FILE__)))
lib = File.join(gem_dir, "lib")
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'securerandom'
require 'json'
require 'easy_box_packer'

container = { dimensions: [25, 33, 43.1], weight_limit: 9999999999 }

items1 = [
  { index: SecureRandom.uuid, dimensions: [3, 5, 7] },
  { index: SecureRandom.uuid, dimensions: [11, 13, 15] },
  { index: SecureRandom.uuid, dimensions: [17, 19, 23] },
]

items2 = [
  { dimensions: [1, 1, 1], weight: 1 }
] * 64

items3 = Array.new(128) {
  {
    index: SecureRandom.uuid,
    dimensions: [3.0 * (1.0 + rand) * 3.0, 3.0 * (1.0 * rand) * 3.0, 5.0 * (0.5 + rand) * 5.0],
    weight: 1
  }
}

items = items3.shuffle
factorial = (Math.gamma(items.length+1)).to_i

solutions = []

itemsp = items.permutation

min_score = 99999999999999
max_score = -1
solutions_desired = ([factorial, 1024].min)

#NOTE: 40320 benchmark number
solutions_desired.times { |i|
  itemsn = itemsp.next.shuffle

  bins = EasyBoxPacker.pack(
    container,
    itemsn
  )

  raise bins[:errors].inspect unless bins[:errors].empty?

  solutions << bins

  score = bins[:packings].length
  if score < min_score
    min_score = score
  end

  if score > max_score
    max_score = score
  end
}

puts "solved #{solutions_desired} or #{"%0.10f" % ((solutions_desired.to_f / factorial.to_f) * 100.0)}% of #{factorial} possible, min/max bins: #{min_score}/#{max_score}"

mvc = EasyBoxPacker.find_smallest_container(items)

File.write("public/rendering.json", {:container => container, :items => items, :solutions => solutions, :mvc => mvc}.to_json)
